//
// ObjectsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ObjectsAPI {
    /**
     Add AR object by image
     
     - parameter description: (form)  
     - parameter image: (form) A JPEG-encoded image, must include GPS data in EXIF tags 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addObjectByImage(description: ObjectWithMarkedImage, image: URL, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AddObjectResult?,_ error: Error?) -> Void)) {
        addObjectByImageWithRequestBuilder(description: description, image: image).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add AR object by image
     - POST /object
     - Add a custom object by marked image
     - parameter description: (form)  
     - parameter image: (form) A JPEG-encoded image, must include GPS data in EXIF tags 
     - returns: RequestBuilder<AddObjectResult> 
     */
    open class func addObjectByImageWithRequestBuilder(description: ObjectWithMarkedImage, image: URL) -> RequestBuilder<AddObjectResult> {
        let path = "/object"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "description": description.encodeToJSON(),
            "image": image.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AddObjectResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add AR object by 3D pose
     
     - parameter objectWithPose: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addObjectByPose(objectWithPose: ObjectWithPose? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AddObjectResult?,_ error: Error?) -> Void)) {
        addObjectByPoseWithRequestBuilder(objectWithPose: objectWithPose).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add AR object by 3D pose
     - POST /object/pose
     - Add a custom object by 3d pose
     - parameter objectWithPose: (body)  (optional)
     - returns: RequestBuilder<AddObjectResult> 
     */
    open class func addObjectByPoseWithRequestBuilder(objectWithPose: ObjectWithPose? = nil) -> RequestBuilder<AddObjectResult> {
        let path = "/object/pose"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: objectWithPose)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AddObjectResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
